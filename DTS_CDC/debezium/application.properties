# Sink
debezium.sink.type=kafka
debezium.sink.kafka.producer.bootstrap.servers=localhost:9092
debezium.sink.kafka.producer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
debezium.sink.kafka.producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
debezium.sink.kafka.producer.acks=all
debezium.sink.kafka.producer.retries=1
debezium.sink.kafka.producer.batch.size=16384
debezium.sink.kafka.producer.buffer.memory=33554432
debezium.sink.kafka.producer.linger.ms=1
# debezium.sink.redis.address=localhost:6379
# debezium.sink.redis.memory.threshold.percentage=0

# Source
debezium.source.connector.class=io.debezium.connector.mysql.MySqlConnector
debezium.source.database.hostname=localhost
debezium.source.database.port=33065
debezium.source.database.user=root
debezium.source.database.password=123456
# A numeric ID of this database client, which must be unique across all currently-running database processes in the MySQL cluster.
debezium.source.database.server.id=12345
debezium.source.topic.prefix=ldd
debezium.source.include.schema.changes=true
# Determines whether the connector should omit publishing change events when there are no modifications in the included columns.
debezium.source.skip.messages.without.change=true
# debezium.source.tombstones.on.delete=false
# Whether to include the detailed schema information generated by Debezium in each record written to RDI.
# Note: Including the schema reduces the initial sync throughput and is not recommended for large data sets.
debezium.source.key.converter.schemas.enable=false
debezium.source.value.converter.schemas.enable=false
# When detailed schema information is excluded, handle decimal numeric types as strings.
debezium.source.decimal.handling.mode=string

debezium.source.database.include.list=mydb
debezium.source.table.include.list=mydb.orders

# 默认用debezium.sink.redis.address
debezium.source.offset.storage.redis.address=localhost:6379
debezium.source.offset.storage.redis.wait.timeout.ms=1000
debezium.source.offset.storage=io.debezium.storage.redis.offset.RedisOffsetBackingStore
debezium.source.offset.flush.interval.ms=0
debezium.source.schema.history.internal=io.debezium.storage.redis.history.RedisSchemaHistory
debezium.source.schema.history.internal.redis.address=localhost:6379
# Records only DDL statements that are relevant to tables whose changes are being captured by Debezium.
debezium.source.schema.history.internal.store.only.captured.tables.ddl=true

# debezium.source.schema.history.internal.redis.key=metadata:debezium:schema_history
# debezium.source.offset.storage.redis.key=metadata:debezium:offsets

## internal http server
debezium.source.http.port=8040

# Transforms
# debezium.transforms=AddPrefix
# debezium.transforms.AddPrefix.type=org.apache.kafka.connect.transforms.RegexRouter
# debezium.transforms.AddPrefix.regex=.*
# debezium.transforms.AddPrefix.replacement=data:$0

# debezium.transforms=AddPrefix,EnvelopeTransformation
# debezium.transforms.AddPrefix.type=org.apache.kafka.connect.transforms.RegexRouter
# debezium.transforms.AddPrefix.regex=.*
# debezium.transforms.AddPrefix.replacement=data:\$0
# debezium.transforms.EnvelopeTransformation.type=io.debezium.connector.cassandra.transforms.EnvelopeTransformation


# Quarkus
# quarkus.log.level=INFO
# quarkus.log.console.json=false
# Uncomment to change Debezium port from 8080 [default] to any other port
# quarkus.http.port=8980
# quarkus.log.file.enable=true

# Logging
# Uncomment the following lines if running Debezium Server as a Java standalone process (non-containerized).
#quarkus.log.file.enable=true
#quarkus.log.file.path=<LOG_FILE_PATH>
#quarkus.log.file.rotation.max-file-size=100M
#quarkus.log.file.rotation.rotate-on-boot=true
#quarkus.log.file.rotation.file-suffix=.yyyy-MM-dd.gz
#quarkus.log.file.rotation.max-backup-index=3

# The default minimum log level for every log category, change only quarkus.log.level when needed.
quarkus.log.min-level=TRACE
# The default log level for every log category.
quarkus.log.level=INFO
# Determine whether to enable the JSON console formatting extension, which disables "normal" console formatting.
quarkus.log.console.json=false
# The port on which Debezium exposes Microprofile Health endpoint and other exposed status information.
quarkus.http.port=8088



# Important: Do NOT use `include` and `exclude` database lists at the same time, use either `include` or `exclude`.
# An optional, comma-separated list of regular expressions that match database names to be monitored.
# By default, all databases are monitored.
#debezium.source.database.include.list=<DB_NAME1>,<DB_NAME2>...
# An optional, comma-separated list of regular expressions that match database names for which you do not want to capture changes.
#debezium.source.database.exclude.list=<DB_NAME1>,<DB_NAME2>...
# Important: Do NOT use `include` and `exclude` table lists at the same time, use either `include` or `exclude`.
# An optional, comma-separated list of regular expressions that match fully-qualified table identifiers of tables whose changes you want to capture.
#debezium.source.table.include.list=<DB_NAME.TABLE_NAME1>,<DB_NAME.TABLE_NAME2>...
# An optional, comma-separated list of regular expressions that match fully-qualified table identifiers for tables whose changes you do not want to capture.
#debezium.source.table.exclude.list=<DB_NAME.TABLE_NAME1>,<DB_NAME.TABLE_NAME2>...

# Important: Do NOT use include and exclude column lists at the same time, use either include or exclude.
# An optional, comma-separated list of regular expressions that match the fully-qualified names of columns to include in change event record values.
#debezium.source.column.include.list=<DB_NAME.TABLE_NAME.COLUMN_NAME1>,<DB_NAME.TABLE_NAME.COLUMN_NAME2>...
# An optional, comma-separated list of regular expressions that match the fully-qualified names of columns to exclude from change event record values.
#debezium.source.column.exclude.list=<DB_NAME.TABLE_NAME.COLUMN_NAME1>,<DB_NAME.TABLE_NAME.COLUMN_NAME2>...
